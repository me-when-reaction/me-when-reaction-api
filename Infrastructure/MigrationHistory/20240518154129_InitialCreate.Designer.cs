// <auto-generated />
using System;
using MeWhen.Infrastructure.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace MeWhen.Infrastructure.MigrationHistory
{
    [DbContext(typeof(MeWhenDBContext))]
    [Migration("20240518154129_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("MeWhen.Domain.Model.ImageModel", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<int>("AgeRating")
                        .HasColumnType("integer")
                        .HasColumnName("age_rating");

                    b.Property<DateTime?>("DateDel")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_del");

                    b.Property<DateTime>("DateIn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_in");

                    b.Property<DateTime?>("DateUp")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_up");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean")
                        .HasColumnName("deleted");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Extension")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("extension");

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("link");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("source");

                    b.Property<Guid?>("UserDel")
                        .HasColumnType("uuid")
                        .HasColumnName("user_del");

                    b.Property<Guid>("UserIn")
                        .HasColumnType("uuid")
                        .HasColumnName("user_in");

                    b.Property<Guid?>("UserUp")
                        .HasColumnType("uuid")
                        .HasColumnName("user_up");

                    b.HasKey("ID");

                    b.ToTable("tr_image", (string)null);
                });

            modelBuilder.Entity("MeWhen.Domain.Model.ImageTagModel", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime?>("DateDel")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_del");

                    b.Property<DateTime>("DateIn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_in");

                    b.Property<DateTime?>("DateUp")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_up");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean")
                        .HasColumnName("deleted");

                    b.Property<Guid>("ImageID")
                        .HasColumnType("uuid")
                        .HasColumnName("image_id");

                    b.Property<Guid>("TagID")
                        .HasColumnType("uuid")
                        .HasColumnName("tag_id");

                    b.Property<Guid?>("UserDel")
                        .HasColumnType("uuid")
                        .HasColumnName("user_del");

                    b.Property<Guid>("UserIn")
                        .HasColumnType("uuid")
                        .HasColumnName("user_in");

                    b.Property<Guid?>("UserUp")
                        .HasColumnType("uuid")
                        .HasColumnName("user_up");

                    b.HasKey("ID");

                    b.HasIndex("ImageID");

                    b.HasIndex("TagID");

                    b.ToTable("tr_image_tag", (string)null);
                });

            modelBuilder.Entity("MeWhen.Domain.Model.TagModel", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<int>("AgeRating")
                        .HasColumnType("integer")
                        .HasColumnName("age_rating");

                    b.Property<DateTime?>("DateDel")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_del");

                    b.Property<DateTime>("DateIn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_in");

                    b.Property<DateTime?>("DateUp")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_up");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean")
                        .HasColumnName("deleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<Guid?>("UserDel")
                        .HasColumnType("uuid")
                        .HasColumnName("user_del");

                    b.Property<Guid>("UserIn")
                        .HasColumnType("uuid")
                        .HasColumnName("user_in");

                    b.Property<Guid?>("UserUp")
                        .HasColumnType("uuid")
                        .HasColumnName("user_up");

                    b.HasKey("ID");

                    b.ToTable("tr_tag", (string)null);
                });

            modelBuilder.Entity("MeWhen.Domain.Model.UserModel", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime?>("DateDel")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_del");

                    b.Property<DateTime>("DateIn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_in");

                    b.Property<DateTime?>("DateUp")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_up");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean")
                        .HasColumnName("deleted");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("IdentityID")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("identity_id");

                    b.Property<string>("IdentityProvider")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("identity_provider");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("password");

                    b.Property<Guid?>("UserDel")
                        .HasColumnType("uuid")
                        .HasColumnName("user_del");

                    b.Property<Guid>("UserIn")
                        .HasColumnType("uuid")
                        .HasColumnName("user_in");

                    b.Property<Guid?>("UserUp")
                        .HasColumnType("uuid")
                        .HasColumnName("user_up");

                    b.HasKey("ID");

                    b.ToTable("ms_user", (string)null);
                });

            modelBuilder.Entity("MeWhen.Domain.Model.ImageTagModel", b =>
                {
                    b.HasOne("MeWhen.Domain.Model.ImageModel", "Image")
                        .WithMany("Tags")
                        .HasForeignKey("ImageID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MeWhen.Domain.Model.TagModel", "Tag")
                        .WithMany("TagsUsed")
                        .HasForeignKey("TagID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Image");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("MeWhen.Domain.Model.ImageModel", b =>
                {
                    b.Navigation("Tags");
                });

            modelBuilder.Entity("MeWhen.Domain.Model.TagModel", b =>
                {
                    b.Navigation("TagsUsed");
                });
#pragma warning restore 612, 618
        }
    }
}
